import pandas as pd
import numpy as np
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import StandardScaler
from application_logging import logger
from sklearn import preprocessing

class Preprocessor:
    log_writer = logger.App_Logger()
    fileread = open('TrainingLogs\preprocessingLogs.txt', 'a+')
    def __int__(self):
        pass
    def removeUnwantedFeatures(self,X,col):
        try:
            # need to remove education,capital-loss,capital-gain from dataset
            self.log_writer.log(self.fileread, "Entered in removing unwanted features function !!")
            self.X=X.drop(col,axis=1)
            self.log_writer.log(self.fileread, "Exiting remove unwanted features function,remove unwanted features successfully!!")
            return self.X
        except Exception as e:
            self.log_writer.log(self.fileread, "Encounter error while executing remove unwanted features function ")

    def removeExtraSpace(self,data):
        try:
            self.log_writer.log(self.fileread ,"Entered in removing extra space function !!")
            self.data = data.apply(lambda x: x.str.strip() if x.dtype == object else x)
            self.log_writer.log(self.fileread, "Exiting remove extra space function,removed extra spaces successfully!!")
            return self.data
        except Exception as e :
            self.log_writer.log(self.fileread, "Encounter error while removing extra spaces from data, in removeExtraSpace function.")

    def seperateDependentIndependentColumns(self, data):
        try:
            self.log_writer.log(self.fileread, "Entered in seperate independent and dependent function !!")
            self.X=data.drop('salary',axis=1)
            self.y=data['salary']
            self.log_writer.log(self.fileread, "Exiting seperate ndependent and dependent function,function run successfully!!")
            return self.X,self.y
        except Exception as e:
            self.log_writer.log(self.fileread,"Encounter error while seperating independent and dependent function")

    def replaceMissingValueValueWithNaN(self, X):
        try:
            self.log_writer.log(self.fileread, "Entered in replace missing value with nan !!")
            self.X = X.replace('?', np.nan)
            self.log_writer.log(self.fileread, "Exiting remove extra space function,removed extra spaces successfully!!")
            return self.X
        except Exception as e:
            self.log_writer.log(self.fileread,"Encounter error while replace missing value with nan, in replaceMissingValueWithNan function.")

    def columnsWithMissingVlaue(self,X):
        try:
            self.log_writer.log(self.fileread, "Entered in function column with missing value !!")
            self.is_null_present=False
            self.columns_with_missing_value=[]
            for i in X.columns:
                if (X[i].isnull().sum()>0):
                    self.columns_with_missing_value.append(i)
                    self.is_null_present=True
            self.log_writer.log(self.fileread, "Exiting columns with missing value function,get columns names successfully!!")
            return self.columns_with_missing_value, self.is_null_present
        except Exception as e:
            self.log_writer.log(self.fileread,"Encounter error while executing function columns with missing value")

    def imputeMissingValue(self,columns_with_missing_value, X):
        try:
            self.log_writer.log(self.fileread, "Entered in function impute missing value !!")
            self.columns_with_missing_value=columns_with_missing_value
            for column in self.columns_with_missing_value:
                self.X = X[column].fillna(X.mode()[0],inplace=True)
            self.log_writer.log(self.fileread, "Missing value replaced successfully exiting impute missing value function !!")
            return self.X
        except Exception as e:
            self.log_writer.log(self.fileread, "Error occurred in impute missing value function")

    def outliarsCompute(self, X,col):
        try:
            self.log_writer.log(self.fileread, "Entered in function compute outliars !!")
            self.IQR = np.quantile(X[col], 0.75) - np.quantile(X[col], 0.25)
            self.lower_boundary = np.quantile(X[col], 0.25) - 1.5 * self.IQR
            self.upper_boundary = np.quantile(X[col], 0.75) + 1.5 * self.IQR
            self.X[col] = np.where(X[col] < self.lower_boundary, self.lower_boundary, X[col])
            self.X[col] = np.where(X[col] > self.upper_boundary, self.upper_boundary, X[col])
            self.log_writer.log(self.fileread, "Exiting outliarsCompute,replaced outliars successfully")
            return self.X
        except Exception as e:
            self.log_writer.log(self.fileread, "Error occurred in outliars compute function")

    def computeOutliars(self, X, col):
        try:
            self.upper_boundary = X[col].mean() + 1.5 * X[col].std()
            self.lower_boundary = X[col].mean() - 1.5 * X[col].std()
            self.X[col] = np.where(X[col] <= self.lower_boundary, X[col].median(), X[col])
            self.X[col] = np.where(X[col] >= self.upper_boundary, X[col].median(), X[col])
            self.log_writer.log(self.fileread, "Exiting computeOutliars,replaced outliars successfully")
            return self.X
        except Exception as e:
            self.log_writer.log(self.fileread, "Error occurred in compute Outliars function")

    def handleImbalancedDataSet(self , X,y):
        try:
            self.log_writer.log(self.fileread, "Entered in function handle balanced dataset !!")
            oversample = SMOTE()
            X, y = oversample.fit_resample(X,y)
            self.log_writer.log(self.fileread, "Exiting Handle Imbalanced Dataset,Handle Imbalanced dataset successfully")
            return X,y
        except Exception as e:
            self.log_writer.log(self.fileread, "Error occurred in handle imbalanced dataset function")

    def scaleDownNumericFeatures(self,X):
        try:
            self.log_writer.log(self.fileread, "Entered in function scale Down Numeric Features!!")
            self.numeric_type = self.X.select_dtypes(exclude='object')
            self.columnsNames=self.numeric_type.columns
            #print("Numerical Columns",self.columnsNames)
            self.std = StandardScaler()
            self.XStd = self.std.fit_transform(self.numeric_type)
            self.numeric = pd.DataFrame(data=self.XStd,columns=self.columnsNames)
            self.log_writer.log(self.fileread, "Exiting scale down numeric features Dataset,scale features successfully")
            return self.numeric
        except Exception as e:
            self.log_writer.log(self.fileread, "Error occurred in scaling down numeric features")

    def encodeCategoryFeatures(self,X):
        try:
            self.log_writer.log(self.fileread, "Entered in function encode categorical Features!!")
            temp1=X.drop(['education'],axis=1)
            self.object_type = temp1.select_dtypes(include='object')
            self.columnsNames=self.object_type.columns
            print("Categorical Columns",self.columnsNames)
            temp=pd.DataFrame()
            for col in self.columnsNames:
                dummies=pd.get_dummies(self.object_type[col], drop_first=True,prefix=col)
                temp=pd.concat([temp,dummies],axis=1)
            labelEncoder = preprocessing.LabelEncoder()
            encode= labelEncoder.fit_transform(X['education'])
            le_name_mapping = dict(zip(labelEncoder.classes_, labelEncoder.transform(labelEncoder.classes_)))
            print("first")
            print(X['education'])
            print("mapping",le_name_mapping)
            lst=X['education'].map(le_name_mapping)
            temp['education']=lst
            #pd.concat([temp,X['education']])
            #self.log_writer.log(self.fileread, "Exiting encode categorical features Dataset,encode features successfully")
            return temp
        except Exception as e:
            self.log_writer.log(self.fileread, "Error occurred in encode category features features")


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































